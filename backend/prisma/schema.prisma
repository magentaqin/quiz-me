generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  userName  String     @unique
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  password  String     @default("")
  role      Role       @default(USER)
  answers   Answer[]
  questions Question[]
}

model Question {
  id          Int               @id @default(autoincrement())
  title       String            @unique @db.VarChar(300)
  description String            @db.VarChar(1000)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
  authorId    String
  questionId  String            @unique
  level       Level             @default(ENTRY)
  status      Status            @default(NORMAL)
  answers     Answer[]
  author      User              @relation(fields: [authorId], references: [userId])
  tags        TagsOnQuestions[]

  @@index([questionId], map: "questionId")
  @@index([authorId], map: "author")
  @@fulltext([title, description])
}

model QuestionTag {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(20)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
  tagId       String            @unique
  description String            @default("") @db.VarChar(200)
  status      Status            @default(NORMAL)
  questions   TagsOnQuestions[]
}

model TagsOnQuestions {
  questionId String
  tagId      String
  createdAt  DateTime    @default(now())
  question   Question    @relation(fields: [questionId], references: [questionId])
  tag        QuestionTag @relation(fields: [tagId], references: [tagId])

  @@id([questionId, tagId])
  @@index([tagId], map: "TagsOnQuestions_tagId_fkey")
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  authorId   String
  questionId String
  answerId   String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  status     Status   @default(NORMAL)
  author     User     @relation(fields: [authorId], references: [userId])
  question   Question @relation(fields: [questionId], references: [questionId])

  @@index([authorId], map: "author")
  @@index([questionId], map: "question")
  @@fulltext([content])
}

enum Role {
  USER
  ADMIN
}

enum Level {
  ENTRY
  MID
  HIGH
}

enum Status {
  NORMAL
  DELETED
}
